cmake_minimum_required(VERSION 3.4.1)

#Instruct our compiler that we want to use c++ 17 and use exceptions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fexceptions")

#Determine what build type we are in, shifted to lower case (debug or release).
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_VARIANT_DIR)

#Location of our third party libraries.
set(THIRD_PARTY_DIR "${CMAKE_SOURCE_DIR}/../../../third-party")

#Location of our own shared C++ code base.
set(MAIN_SOURCE_DIR "../../main/src")

set(KTX_DIR "${THIRD_PARTY_DIR}/ktx")

#Location of the .so files generated by the 'sdl' module.
#set(SDL_SO_DIR "${CMAKE_SOURCE_DIR}/../sdl/build/intermediates/ndkBuild/${BUILD_VARIANT_DIR}/obj/local/${ANDROID_ABI}")

#Location of OVR SDK
set(OVR_HOME "${THIRD_PARTY_DIR}/ovr-mobile")


# This is required to allow us to compile the Vulkan C++ header successfully.
add_definitions(-DVULKAN_HPP_TYPESAFE_CONVERSION)


#This is a dependency target for SDL, we will name it 'hidapi'.
#add_library(
#	hidapi
#	SHARED
#	IMPORTED
#)


#This is the main SDL library target, we will name it 'sdl2'.
#add_library(
#	sdl2
#	SHARED
#	IMPORTED
#)

#This is the SDL IMAGE library target, we will name it 'sdl2_image'
#add_library(
#	sdl2_image
#	SHARED
#	IMPORTED
#)


#This is the built in NDK logging library
find_library(log-lib log)

#We need to tell the C++ compiler where to find the .so (shared object) files for each of our targets. When the 'sdl module is built, it will generate these .so files in its build folder. At the top of this file was created a filed named SDL_SO_DIR which points at the build folder location where the .so files can be found.
#set_target_properties(
#	hidapi
#	PROPERTIES
#	IMPORTED_LOCATION
#	${SDL_SO_DIR}/libhidapi.so
#)

#set_target_properties(
#	sdl2
#	PROPERTIES
#	IMPORTED_LOCATION
#	${SDL_SO_DIR}/libSDL2.so
#)

#set_target_properties(
#	sdl2_image
#	PROPERTIES
#	IMPORTED_LOCATION
#	${SDL_SO_DIR}/libSDL2_image.so
#)



#We will tell our build system where to look for third party header files.
#include_directories(${THIRD_PARTY_DIR}/SDL/include)
include_directories(${THIRD_PARTY_DIR}/glm)
include_directories(${THIRD_PARTY_DIR}/ktx/include)
include_directories(${THIRD_PARTY_DIR}/tiny-obj-loader)
#include_directories(${THIRD_PARTY_DIR}/SDL2_image)
include_directories(${ANDROID_NDK}/sources/third_party/vulkan/src/include)
include_directories(${ANDROID_NDK}/sources/third_party/vulkan/src/common)
include_directories(${CMAKE_SOURCE_DIR}/src/main/cpp)

# VrApi
include_directories(
        ${OVR_HOME}/VrApi/Include
        ${OVR_HOME}/VrSamples/SampleFramework/Src
        ${OVR_HOME}/1stParty/OVR/Include
        ${OVR_HOME}/1stParty/utilities/include
        ${OVR_HOME}/3rdParty/minizip/src
        ${OVR_HOME}/3rdParty/stb/src
        ${ANDROID_NDK}/sources/android/native_app_glue)


# We will recursively collate all .hpp header and .cpp source files under the main source directory as the input for the compilation.
file(GLOB_RECURSE CPP_HEADERS ${MAIN_SOURCE_DIR}/*.hpp)
file(GLOB_RECURSE CPP_SOURCES ${MAIN_SOURCE_DIR}/*.cpp)


add_library(vrapi SHARED IMPORTED)
set_target_properties(vrapi
        PROPERTIES IMPORTED_LOCATION
        ${OVR_HOME}/VrApi/Libs/Android/${ANDROID_ABI}/Debug/libvrapi.so)

add_library(minizip SHARED IMPORTED)
set_target_properties(minizip
        PROPERTIES IMPORTED_LOCATION
        ${OVR_HOME}/3rdParty/minizip/lib/android/${ANDROID_ABI}/libminizip.a)

add_library(stb SHARED IMPORTED)
set_target_properties(stb
        PROPERTIES IMPORTED_LOCATION
        ${OVR_HOME}/3rdParty/stb/lib/android/${ANDROID_ABI}/libstb.a)

add_library(app-glue
        STATIC
        ${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c)

# The 'questart' library target is actually our own C++ code from the shared 'main' source code folder.
add_library(
		questart
		SHARED
		${MAIN_SOURCE_DIR}/main.cpp
		${MAIN_SOURCE_DIR}/scene/scene.hpp
		${MAIN_SOURCE_DIR}/scene/scene-ovr.hpp
		${MAIN_SOURCE_DIR}/scene/scene-ovr.cpp
		${MAIN_SOURCE_DIR}/core/log.hpp
		${MAIN_SOURCE_DIR}/core/log.cpp
		${MAIN_SOURCE_DIR}/core/ovr-wrapper.hpp
		${MAIN_SOURCE_DIR}/core/internal_ptr.hpp
		${MAIN_SOURCE_DIR}/core/renderer.hpp
		${MAIN_SOURCE_DIR}/core/graphics-wrapper.hpp
		${MAIN_SOURCE_DIR}/core/bitmap.hpp
		${MAIN_SOURCE_DIR}/core/bitmap.cpp
		${MAIN_SOURCE_DIR}/core/mesh.hpp
		${MAIN_SOURCE_DIR}/core/mesh.cpp
		${MAIN_SOURCE_DIR}/core/vertex.hpp
		${MAIN_SOURCE_DIR}/core/vertex.cpp
		${MAIN_SOURCE_DIR}/core/assets.hpp
		${MAIN_SOURCE_DIR}/core/assets.cpp
		${MAIN_SOURCE_DIR}/core/asset-manifest.hpp
		${MAIN_SOURCE_DIR}/core/asset-inventory.hpp
		${MAIN_SOURCE_DIR}/core/asset-inventory.cpp
		${MAIN_SOURCE_DIR}/core/static-mesh-instance.hpp
		${MAIN_SOURCE_DIR}/core/static-mesh-instance.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-system.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-system.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-context.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-context.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-physical-device.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-physical-device.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-device.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-device.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-command-pool.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-command-pool.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-pipeline-cache.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-pipeline-cache.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-color-swapchain.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-color-swapchain.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-render-pass.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-render-pass.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-formats.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-image-view.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-image-view.cpp
        ${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-framebuffer.hpp
        ${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-framebuffer.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-render-context.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-render-context.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-image.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-image.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-mesh.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-mesh.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-buffer.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-buffer.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-texture.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-texture.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-pipeline.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-pipeline.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-asset-manager.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-asset-manager.cpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-application.hpp
		${MAIN_SOURCE_DIR}/application/ovrvulkan/ovr-vulkan-application.cpp
		${ANDROID_NDK}/sources/third_party/vulkan/src/common/vulkan_wrapper.cpp

		${KTX_DIR}/lib/texture.c
		${KTX_DIR}/lib/hashlist.c
		${KTX_DIR}/lib/checkheader.c
		${KTX_DIR}/lib/swap.c
		${KTX_DIR}/lib/memstream.c
		${KTX_DIR}/lib/filestream.c
)

# Finally, we need to link all the libraries we want to use in our project together, remembering that the 'questart' library is in fact our own C++ code. Note also we are including the 'GLESv3' library for OpenGL ES3 support, though we don't need to define it ourselves with the 'add_library' commands.
target_link_libraries(
	questart
#	hidapi
#	sdl2
#	sdl2_image
	android
	app-glue
	vrapi
	z
	minizip
	stb
	${log-lib}
	GLESv3
)

# The following linker file is crucial, see: https://github.com/android/ndk/issues/381
# Otherwise the linker will strip this as "unused" since this is a static library, but we
# need to keep it around as the interface for JNI.
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -u ANativeActivity_onCreate")
